import csv 
import random
import math

def loadcsv(filename):
    lines=csv.reader(open(filename,"r"));
    dataset=list(lines)
    for i in range(len(dataset)):
        dataset[i]=[float(x) for x in dataset[i]]
    return dataset
def splitdataset(dataset,splitratio):
    trainsize=int(len(dataset)*splitratio);
    trainset=[]
    copy=list(dataset)
    while len(trainset)<trainsize:
        index=random.randrange(len(copy))
        trainset.append(copy.pop(index))
    return[trainset,copy]
def seperatebyclass(dataset):
    seprated={}
    for i in range(len(dataset)):
        vector=dataset[i]
        if(vector[-1] not in seprated):
            seprated[vector[-1]]=[]
        seprated[vector[-1]].append(vector)
    return seprated
def mean(numbers):
    return sum(numbers)/float(len(numbers))

def stdev(numbers):
    avg=mean(numbers)
    variance=sum([pow(x-avg,2)for x in numbers])/float(len(numbers)-1)
    return math.sqrt(variance)

def summarize(dataset):
    summaries=[(mean(attribute),stdev(attribute))for attribute in zip(*dataset)];
    del summaries[-1]
    return summaries

def summarizebyclass(dataset):
    seprated=seperatebyclass(dataset);
    summaries={}
    for classvalue,instances in seprated.items():
        summaries[classvalue]=summarize(instances)
    return summaries

def calculateprobability(x,mean,stdev):
    exponent=math.exp(-(math.pow(x-mean,2)/(2*math.pow(stdev,2))))
    return(1/(math.sqrt(2*math.pi)*stdev))*exponent

def calculateclassprobabilities(summaries,inputvector):
    probabilities={}
    for classvalue,classsummaries in summaries.items():
        probabilities[classvalue]=1
    for i in range(len(classsummaries)):
        mean,stdev=classsummaries[i]
        x=inputvector[i]
        probabilities[classvalue]*=calculateprobability(x,mean,stdev);
        return probabilities
def predict(summaries,inputvector):
    probabilities=calculateclassprobabilities(summaries,inputvector)
    bestLabel,bestProb=None,-1
    for classvalue,probability in probabilities.items():
        if bestLabel is None or probability>bestProb:
            bestProb=probability
            bestLabel=classvalue
    return bestLabel
def getpredictions(summaries,testset):
    predictions=[]
    for i in range(len(testset)):
        result=predict(summaries,testset[i])
        predictions.append(result)
    return predictions
def getaccuracy(testset,predictions):
    correct=0
    for i in range(len(testset)):
        if testset[i][-1]==predictions[i]:
            correct+=1
    return(correct/float(len(testset)))*100 
filename='Dataset/6-dataset.csv'
splitratio=0.68
dataset=loadcsv(filename);



trainingset,testset=splitdataset(dataset,splitratio)
print('Split={0} rows into Train={1} and Test={2} rows'.format(len(dataset),len(trainingset),len(testset)))

summaries=summarizebyclass(trainingset)
print("\n First five rows of trsining set:\n")
for i in range(0,5):
    print(trainingset[i],"\n")
    
print("\n First five rows of TESTING set:\n")
for i in range(0,5):
    print(testset[i],"\n")

summaries=summarizebyclass(trainingset)
print("\nModel Summaries:\n",summaries)

predictions=getpredictions(summaries,testset)
print("\nPrediction:\n",predictions)

accuracy=getaccuracy(testset,predictions)
print("\nAccuracy of the classifiers is: {0}%".format(accuracy))
    

    